@page "/add/{Username}/{Stop?}"

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager navigationManager
@inject IStringLocalizer<Resource> Localizer
@inject ApiHandler apiHandler
@inject DataHandler DataHandler

<MudPopoverProvider />

<style>
    .center-form {
    display: flex; /* Enables Flexbox */
    align-items: center; /* Centers content vertically */
    height: 80vh; /* Full viewport height */
    }
    .center {
    display: flex;
    justify-content: center;
    }

</style>

<MudGrid Justify="Justify.Center" Class="center-form">
    <MudItem xs="12" sm="6" md="6" lg="4" xxl="2">
        <MudCard Class="pa-5" Elevation="0">
            <MudCardContent>
                <MudText Typo="Typo.h5">
                    @Localizer["SelectFavoriteStop"]
                </MudText>
                @if(loading)
                {
                    <div class="center">
                        <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                    </div>
                }
                else
                {
                    <MudAutocomplete T="Group"
                    Label="@Localizer["Stop"]"
                    @bind-Value="selectedGroup"
                    SearchFunc="SearchStopGroups"
                    ToStringFunc="s => s == null ? string.Empty : s.ToString()"
                    Clearable="true"
                    Dense="true"
                    DebounceInterval="200"
                    MinCharacters="0"
                    MaxItems="20"
                    Variant="Variant.Outlined"
                    ShowProgressIndicator="true"
                    ProgressIndicatorColor="Color.Default"
                    Required="true"
                    RequiredError="@Localizer["RequiredField"]" />
                    @if (selectedGroup is not null)
                    {
                        <br>
                        <div class="center">
                            <MudSwitch @bind-Value="platformSwitch"
                                       Color="Color.Primary"
                                       Label="@Localizer["SelectPlatforms"]" />
                        </div>

                        @if (platformSwitch)
                        {
                            <br>
                            <MudSelect T="string"
                            MultiSelection="true"
                            @bind-SelectedValues="selectedPlatforms"
                            Clearable="true"
                            Dense="true"
                            Label="@Localizer["Platform"]"
                            Variant="Variant.Outlined">
                                @foreach (var stop in selectedGroup.Stops)
                                {
                                    <MudSelectItem T="string" Value="@stop.Platform">
                                        @stop.Platform
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        }
                    }
                }
                <br>
                <MudButton
                OnClick="HandleConfirm"
                Variant="Variant.Outlined"
                FullWidth="true">
                    @Localizer["Confirm"]
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public string Username { get; set; } = string.Empty;
    [Parameter]
    public string? Stop { get; set; }

    public Stops? stops = new();
    public Group? selectedGroup = null;
    private bool loading = true; 
    private bool platformSwitch = false;
    private IEnumerable<string> selectedPlatforms = new HashSet<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            stops = await apiHandler.GetStopsAsync();
            // Select the group by name if Stop parameter is provided
            if (!string.IsNullOrWhiteSpace(Stop) && stops?.Groups != null)
            {
                selectedGroup = stops.Groups.FirstOrDefault(g =>
                    string.Equals(g.Name, Stop, StringComparison.OrdinalIgnoreCase));
            }
        }
        finally
        {
            loading = false;
        }
    }
    /// <summary>
    /// Searches stop groups based on the input value.
    /// </summary>
    /// <param name="value">The search input value.</param>
    /// <param name="token">The cancellation token.</param>
    /// <returns>An IEnumerable of matching groups.</returns>
    private Task<IEnumerable<Group?>> SearchStopGroups(string value, CancellationToken token)
    {
        // empty input
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<Group?>>(stops!.Groups.Take(20));

        var normalizedInput = RemoveDiacritics(value).ToLowerInvariant();
        var result = stops!.Groups
            .Where(x => RemoveDiacritics(x.Name)
            .ToLowerInvariant()
            .Contains(normalizedInput))
            .Take(20);

        return Task.FromResult<IEnumerable<Group?>>(result);
    }
    /// Remove diactitics for better autocomplete
    /// </summary>
    /// <param name="text"></param>
    /// <returns></returns>
    private static string RemoveDiacritics(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return text;

        var normalized = text.Normalize(NormalizationForm.FormD);
        var builder = new StringBuilder();

        foreach (var ch in normalized)
        {
            var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(ch);
            if (unicodeCategory != UnicodeCategory.NonSpacingMark)
            {
                builder.Append(ch);
            }
        }
        return builder.ToString().Normalize(NormalizationForm.FormC);
    }

    /// <summary>
    /// Handles confirmation of the input form
    /// </summary>
    private void HandleConfirm()
    {
        if (selectedGroup is not null)
        {
            StopInfo newFavorite = new StopInfo
                {
                    Name = selectedGroup!.Name,
                    Platforms = selectedPlatforms.ToList()
                };
            if (Stop is null)
            {
                DataHandler.TryAddBoard(Username, newFavorite);
            }
            else
            {
                DataHandler.EditBoard(Username, newFavorite);
            }
            navigationManager.NavigateTo($"/{Username}");
        }
    }
}
