@using System;
@using System.Collections.Generic;
@using System.Text.Json.Serialization;
@using System.Text.Json;


@using MudBlazor
@using Data

@page "/{Username?}"

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager navigationManager
@inject IStringLocalizer<Resource> Localizer
@inject DataHandler DataHandler
@inject ApiHandler ApiHandler

<MudPopoverProvider />
<PageTitle>Boards</PageTitle>


<MudGrid Justify="Justify.Center" Class="pt-5"> 
    <MudItem xs="12" sm="10" md="8" lg="6" xxl="6">
        <MudCard Class="p-0" Elevation="0">
            <MudCardContent Class="py-5">
                @if(boards.Count == 0)
                {
                    <MudText Typo="Typo.body1">
                        @Localizer["NoBoardMessage"]
                    </MudText>
                }
                @foreach(var board in boards) {
                    if (board.Key.Platforms.Count == 0) {
                        <div class="board pa-0">
                            <MudBoard Departures=@board.Value StopName=@board.Key.Name OnDelete="@RemoveBoard" OnEdit="@EditBoard"/>
                        </div>
                    }
                    else {
                        var grouped = board.Value.GroupBy(departure => departure.Stop.PlatformCode);
                        foreach (var group in grouped)
                        {
                            if(board.Key.Platforms.Contains(group.Key)){
                                <div class="board p-0">
                                    <MudBoard Departures=@group StopName=@board.Key.Name PlatformCode=@group.Key OnDelete="@RemoveBoard" OnEdit="@EditBoard"></MudBoard>
                                </div>
                                @* <br> *@
                            }
                        }
                    }
                    <br>
                }
                <MudButton 
                    OnClick="AddNewBoard"
                    Variant="Variant.Outlined"
                    Color="Color.Primary"
                    FullWidth="true">
                    @Localizer["AddBoard"]
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public string? Username { get; set; }

    private Timer? refreshTimer;
    Dictionary<StopInfo, List<Departure>> boards = new();

    protected override void OnInitialized()
    {
        if(Username is null) {
            navigationManager.NavigateTo("/home");
        }
        refreshTimer = new Timer(RefreshData, null, 0, 15000);
    }
    /// <summary>
    /// Reshuffles the data every 30 seconds.
    /// </summary>
    /// <param name="state"></param>
    private async void RefreshData(object? state)
    {
        if (Username is null) return;

        User? user = DataHandler.GetUser(Username!);
        if (user is not null && user.Favorites is not null)
        {
            /// For each favorite stop, get the departure board and add it to the dictionary.
            var updatedBoards = new Dictionary<StopInfo, List<Departure>>();
            foreach (var stop in user.Favorites)
            {
                List<Departure>? departures = await ApiHandler.GetDepartureBoard(stop.Name);
                if (departures is not null)
                    updatedBoards.Add(stop, departures);
            }
            boards = updatedBoards;
        }
        await InvokeAsync(StateHasChanged);
    }
    /// <summary>
    /// Navigates to the add board page.
    /// </summary>
    private void AddNewBoard()
    {
        navigationManager.NavigateTo($"/add/{Username}");
    }
    /// <summary>
    /// Handles removing a board
    /// </summary>
    /// <param name="stopName"></param>
    public void RemoveBoard(string stopName)
    {
        var keyToRemove = boards.Keys.FirstOrDefault(k => k.Name == stopName);
        if (keyToRemove != null)
        {
            boards.Remove(keyToRemove);
        }
        DataHandler.DeleteBoard(Username!, stopName);
        StateHasChanged();
    }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="stopName"></param>
    public void EditBoard(string stopName)
    {
        navigationManager.NavigateTo($"/add/{Username}/{stopName}");
    }
}
