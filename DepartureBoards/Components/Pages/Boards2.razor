@using System;
@using System.Collections.Generic;
@using System.Text.Json.Serialization;
@using System.Text.Json;


@using MudBlazor
@using Data
@using static DepartureBoards.Components.Component.MudBoard

@page "/{Username?}"

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager navigationManager
@inject IStringLocalizer<Resource> Localizer
@inject ApiHandler ApiHandler
@inject UserService UserService

<MudPopoverProvider />
<PageTitle>@Localizer["Boards"]</PageTitle>


<MudGrid Justify="Justify.Center" Class="pt-5"> 
    <MudItem xs="12" sm="10" md="8" lg="6" xxl="6">
        <MudCard Class="p-0" Elevation="0">
            <MudCardContent Class="py-5">
                @if (BoardItems.Count == 0)
                {
                    <MudText Typo="Typo.body1">
                        @Localizer["NoBoardMessage"]
                    </MudText>
                }
                @foreach (var item in BoardItems)
                {
                    if (item.Board.Platforms.Count == 0)
                    {
                        <div class="board pa-0">
                            <MudBoard Departures=@item.Departures
                            StopName=@item.Board.Name
                            OnDelete="() => RemoveBoard(item)"
                            OnEdit="() => ToEditBoard(item.Board)"
                            OnUp="() => MoveBoardUp(item.Board)"
                            OnDown="() => MoveBoardDown(item.Board)" />
                        </div>
                    }
                    else
                    {
                        foreach (var group in item.Departures.GroupBy(departure => departure.Stop.PlatformCode))
                        {
                            if (item.Board.Platforms.Contains(group.Key))
                            {
                                <div class="board p-0">
                                    <MudBoard Departures=@group
                                    StopName=@item.Board.Name
                                    PlatformCode=@group.Key
                                    OnDelete="() => RemoveBoard(item)"
                                    OnEdit="() => ToEditBoard(item.Board)"
                                    OnUp="() => MoveBoardUp(item.Board)"
                                    OnDown="() => MoveBoardDown(item.Board)" />
                                </div>
                                <br>
                            }
                        }
                    }
                }
                <br>
                <MudButton OnClick="AddNewBoard"
                Variant="Variant.Outlined"
                Color="Color.Primary"
                FullWidth="true">
                    @Localizer["AddBoard"]
                </MudButton>
                <br>
                <br>
                <MudButton
                OnClick="() => DeleteUser(Username)"
                Variant="Variant.Outlined"
                Color="Color.Primary"
                FullWidth="true">
                    @Localizer["DeleteMyAccount"]
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public string? Username { get; set; }

    private Timer? refreshTimer;
    private User? user;
    private List<BoardViewModel> BoardItems = new();
    protected override async Task OnInitializedAsync()
    {
        if(Username is null) {
            navigationManager.NavigateTo("/home");
            return;
        }
        user = await UserService.GetUserAsync(Username!);

        refreshTimer = new Timer(RefreshData, null, 0, 15000);

    }
    /// <summary>
    /// Reshuffles the data every 30 seconds.
    /// Loads realtime data from API for every board
    /// </summary>
    /// <param name="state"></param>
    private async void RefreshData(object? state)
    {
        if (user is null || user.Boards is null)
            return;

        user.Boards = user.Boards.OrderBy(board => board.Order).ToList();
        BoardItems.Clear();
        foreach (var board in user.Boards)
        {
            List<Departure>? departures = await ApiHandler.GetDepartureBoard(board.Name);
            if(departures is not null)
            {
                BoardItems.Add(new BoardViewModel()
                    {
                        Board = board,
                        Departures = departures
                    });
            }
        }
        await InvokeAsync(StateHasChanged);
    }
    /// <summary>
    /// Navigates to the add board page.
    /// </summary>
    private void AddNewBoard()
    {
        navigationManager.NavigateTo($"/add/{Username}");
    }
    /// <summary>
    /// Handles removing a board
    /// </summary>
    /// <param name="stopName"></param>
    public void RemoveBoard(BoardViewModel viewModel)
    {
        BoardItems.Remove(viewModel);
        var index = viewModel.Board.Order;
        foreach (var board in user.Boards)
        {
            if (board.Order > index)
            {
                board.Order -= 1;
            }
        }
        user.Boards.Remove(viewModel.Board);
        UserService.UpdateUser(user);
        StateHasChanged();
    }
    /// <summary>
    /// Redirects to the edit page for the board
    /// </summary>
    /// <param name="stopName"></param>
    public void ToEditBoard(Board board)
    {
        navigationManager.NavigateTo($"/edit/{board.Id}");
    }

    /// <summary>
    /// Deletes user from the database and its data
    /// </summary>
    /// <param name="username"></param>
    /// <returns></returns>
    public async Task DeleteUser(string username)
    {
        await UserService.DeleteUserAsync(username);
        navigationManager.NavigateTo("/home");
    }

    private async Task MoveBoardUp(Board board)
    {
        var index = BoardItems.FindIndex(x => x.Board == board);
        if (index > 0)
        {
            // Swap with the previous
            var prev = BoardItems[index - 1];

            (board.Order, prev.Board.Order) = (prev.Board.Order, board.Order);

            // Re-sort by order
            BoardItems = BoardItems.OrderBy(x => x.Board.Order).ToList();
            //user.Boards = user.Boards.OrderBy(x => x.Order).ToList();

            await UserService.UpdateUser(user);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task MoveBoardDown(Board board)
    {
        var index = BoardItems.FindIndex(x => x.Board == board);
        if (index < BoardItems.Count - 1)
        {
            var next = BoardItems[index + 1];
            (board.Order, next.Board.Order) = (next.Board.Order, board.Order);

            BoardItems = BoardItems.OrderBy(x => x.Board.Order).ToList();

            await UserService.UpdateUser(user);
            await InvokeAsync(StateHasChanged);
        }
    }
}